---
version: '3'

networks:
  docker_kafka:
   name: docker_kafka

services:
  zookeeper:
    image: confluentinc/cp-zookeeper
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - docker_kafka
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka
    hostname: broker
    container_name: broker
    networks:
      - docker_kafka
    ports:
      - 9092:9092
      - 29092:29092
    depends_on:
      - zookeeper
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: INTERNAL://broker:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: kafka-topics --bootstrap-server broker:29092 --list
      interval: 30s
      timeout: 10s
      retries: 3

  rss_scraper:
     image: ghcr.io/oth-datapipeline/scraping-scripts:develop
     hostname: rss_scraper
     container_name: rss_scraper
     networks:
      - docker_kafka
     volumes: 
      - ../producers/logs:/producers/logs
     depends_on:
       broker:
        condition: service_healthy
     environment:
       REDDIT_CLIENT_ID: ${REDDIT_CLIENT_ID}
       REDDIT_CLIENT_SECRET: ${REDDIT_CLIENT_SECRET}
       TWITTER_CONSUMER_KEY: ${TWITTER_CONSUMER_KEY}
       TWITTER_CONSUMER_SECRET: ${TWITTER_CONSUMER_SECRET}
       TWITTER_BEARER_TOKEN: ${TWITTER_BEARER_TOKEN}
       MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
       MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
     entrypoint:
      - bash
      - -c
      - |
        echo 'Executing scraper for rss...'
        python3 src/data_collection.py --config=config.json "rss" --base_url=https://blog.feedspot.com/world_news_rss_feeds/

  mongo:
    image: mongo:4.4.13
    container_name: mongo
    hostname: mongo
    restart: always
    ports:
      - 27017:27017
    networks:
     - docker_kafka
    # Mounting volume to save data on host machine
    volumes:
     - ../mongodb/data:/data/db
    environment:
      # @TODO: Move this to env variables / secrets
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  mongo-express:
    # Web-based MongoDB admin interface written with Node.js, Express and Bootstrap3
    # https://github.com/mongo-express/mongo-express
    image: mongo-express
    container_name: mongo_express
    hostname: mongo_express
    restart: always
    depends_on:
     mongo:
       condition: service_healthy
    ports:
      - 8081:8081
    networks:
     - docker_kafka
    environment:
      # @TODO: Move this to env variables / secrets
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

